1) Take a look at the class diagram and code for 
   paint. The class diagram is in diagram.ucls
   and in diagram.gif.

   Identify the classes involved in the 

   a) Factory Design Pattern

      ShapeManipulationStrategy
      ShapeManipulationFactor

   b) Strategy Design Pattern

        ShapeManipulationStrategy
        View
        PaintModel
        CircleManipulatorStrategy
        SquiggleManipulatorStrategy
        RectangleManipulatorStrategy


   c) Command Design Pattern

        CircleCommand
        RectangleCommand
        PaintCommand
        RectangleCommand

   d) Which classes are observable. Which classes are
      observers. Note that this is not included in the
      class diagrams, so you will have to take a look at
      the code.

      Observable:

      YOUR ANSWER GOES HERE
      PaintPanel
      PaintModel
      shape

      Observers are? What do they Observe?:

      YOUR ANSWER GOES HERE

      PaintModel - > Shape
      PaintPanel - > PaintModel
      PaintCommand - > PaintModel

2) Explain what happens in the code after each step in the following
   sequence of events:

   a) The user clicks the Circle button on the ShapeChooserPanel.

      The button fires the handle event handler in the ShapeChooserPanel
      which asks the ShapeManipulatorFactory for a CircleManipulatorStrategy
      The CircleManipulatorStrategy is hooked up to to the PaintModel
      so that the strategy can modify the PaintModel in response to mouse events.
      This new CircleManipulatorStrategy is installed in the view
      which in turn installs the strategy in the PaintPanel
      so that now all PaintPanel mouse events are sent to the
      new CircleManipulatorStrategy.

   b) Next the user clicks in the Canvas on the PaintPanel.

      YOUR ANSWER GOES HERE
      The PaintPanel will call the handle method whioh will call the current strategy
      to handle the event. since the current strategy is the Circle strategy it will
      set up the nformation for a circle like set a point and initiate a circle
      which goes up and calls Circle command which calls super up to PaintCommand.

   c) Next the user drags the mouse across the Canvas in the PaintPanel.

      YOUR ANSWER GOES HERE
      as the user drags the mouse across the canvas
      the CircleManipulator will calculate the radius continously and will set it and notify
      the observes in the circle class.

   d) Next the user clicks in the Canvas on the Paint Panel. 

      YOUR ANSWER GOES HERE
      again but with a new instance of a circle using the factory method
      The PaintPanel will call the handle method whioh will call the current strategy
      to handle the event. since the current strategy is the Circle strategy it will
      set up the information for a circle like set a point and initiate a circle
      which goes up and calls Circle command which calls super up to PaintCommand.

   e) Next the user clicks the Rectangle Button on the ShapeChooserPanel.

      YOUR ANSWER GOES HERE
      The button fires the handle event handler in the ShapeChooserPanel
            which asks the ShapeManipulatorFactory for a RectangleManipulatorStrategy
            The RectangleManipulatorStrategy is hooked up to to the PaintModel
            so that the strategy can modify the PaintModel in response to mouse events.
            This new RectangleManipulatorStrategy is installed in the view
            which in turn installs the strategy in the PaintPanel
            so that now all PaintPanel mouse events are sent to the
            new RectangleManipulatorStrategy.


